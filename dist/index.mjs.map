{"mappings":"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","sources":["package.json","src/index.ts","src/constants.ts","src/lib/cli.ts","src/lib/configuration.ts","src/lib/hooks-loader.ts","src/lib/filesystem.ts","src/lib/parser.ts","src/lib/uploader.ts","src/lib/stats.ts"],"sourcesContent":["{\n  \"name\": \"ynab-buddy\",\n  \"version\": \"3.0.0-alpha.1\",\n  \"description\": \"Upload & import CSV files from any bank into YNAB\",\n  \"keywords\": [\n    \"ynab\",\n    \"youneedabudget\",\n    \"csv\",\n    \"import\"\n  ],\n  \"type\": \"module\",\n  \"module\": \"./dist/index.mjs\",\n  \"bin\": \"./dist/index.mjs\",\n  \"files\": [\n    \"dist/\",\n    \"assets/\"\n  ],\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"Niels Maerten\",\n    \"url\": \"https://github.com/nielsmaerten\"\n  },\n  \"homepage\": \"https://github.com/nielsmaerten/ynab-buddy\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/nielsmaerten/ynab-buddy\"\n  },\n  \"scripts\": {\n    \"start\": \"ts-node ./src/index.ts\",\n    \"hooks\": \"cross-env NODE_ENV=hooks yarn start\",\n    \"check-types\": \"tsc --noEmit\",\n    \"build\": \"parcel build ./src/index.ts --dist-dir dist\",\n    \"package\": \"yarn pkg ./dist/index.js --config ./package.json\",\n    \"package:rebuild\": \"yarn build && yarn package\",\n    \"publish:np\": \"yarn build && np --no-cleanup --no-yarn && yarn package --compress Brotli\",\n    \"test\": \"jest\",\n    \"lint:fix\": \"yarn prettier ./src --write\",\n    \"lint\": \"yarn prettier ./src --check\"\n  },\n  \"pkg\": {\n    \"assets\": [\n      \"assets/config/example.yaml\"\n    ],\n    \"scripts\": \"build/**/*.js\",\n    \"targets\": [\n      \"linux\",\n      \"win\",\n      \"macos\"\n    ],\n    \"outputPath\": \"bin\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  },\n  \"devDependencies\": {\n    \"@types/glob\": \"^8.1.0\",\n    \"@types/jest\": \"^29.4.4\",\n    \"@types/js-yaml\": \"^4.0.5\",\n    \"@types/luxon\": \"^3.2.0\",\n    \"@types/node\": \"^20.11.19\",\n    \"@types/prompts\": \"^2.4.3\",\n    \"commitizen\": \"^4.3.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"cz-conventional-changelog\": \"3.3.0\",\n    \"jest\": \"^29.5.0\",\n    \"np\": \"^8.0.0\",\n    \"parcel\": \"^2.11.0\",\n    \"pkg\": \"^5.8.1\",\n    \"prettier\": \"2.8.8\",\n    \"ts-jest\": \"^29.0.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^5.0.4\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^4.1.2\",\n    \"csv-parse\": \"^5.5.3\",\n    \"csv-stringify\": \"^6.4.5\",\n    \"glob\": \"^10.2.2\",\n    \"js-yaml\": \"^4.1.0\",\n    \"luxon\": \"^3.3.0\",\n    \"minimatch\": \"^9.0.0\",\n    \"prompts\": \"^2.4.2\",\n    \"ynab\": \"^1.47.0\",\n    \"zlib\": \"^1.0.5\"\n  },\n  \"resolutions\": {\n    \"minimist\": \"^1.2.7\"\n  },\n  \"packageManager\": \"yarn@3.8.0\"\n}\n","#!/usr/bin/env node\nimport { messages } from \"./constants\";\nimport * as cli from \"./lib/cli\";\nimport { getConfiguration } from \"./lib/configuration\";\nimport { exportCsv, findBankFiles, cleanup } from \"./lib/filesystem\";\nimport { parseBankFile } from \"./lib/parser\";\nimport { upload } from \"./lib/uploader\";\nimport { BankFile } from \"./types\";\nimport { collectStats } from \"./lib/stats\";\nimport fs from \"fs\";\n\n(async () => {\n  // Ensure the tool has a valid configuration\n  console.log(\"EXPERIMENTAL ES2022 VERSION\");\n  console.log(\"===========================\");\n  const config = getConfiguration();\n\n  // Exit if the config file is not set up yet\n  const isFirstRun = !config.configurationDone;\n  if (!config.configurationDone) return cli.exitApp();\n\n  // Display welcome message and collect stats (if allowed)\n  const statsPromise = collectStats(config);\n  cli.displayWelcomeMessage(isFirstRun);\n\n  // Confirm folder where the tool should look for bank files\n  const importPathExists =\n    config.importPath && fs.existsSync(config.importPath);\n  if (!config.skipPathConfirmation || !importPathExists) {\n    config.importPath = await cli.confirmImportPath(config.importPath);\n  }\n\n  // Find files eligible for conversion in the importPath\n  const bankFiles = findBankFiles(config.importPath!, config);\n  console.log(messages.filesFound, bankFiles.length);\n\n  // Parse and convert bankFiles\n  const doParsing = (bf: BankFile) => parseBankFile(bf, config.parsers);\n  const parsedFiles = bankFiles.map(doParsing);\n\n  // Save parsed files, delete original files\n  parsedFiles.forEach(exportCsv);\n  parsedFiles.forEach(cleanup);\n\n  // Upload to YNAB\n  console.log(\"\");\n  const uploads = parsedFiles.map((parsedFile) => upload(parsedFile, config));\n  await Promise.all([uploads, statsPromise]);\n\n  // All done!\n  cli.displayGoodbyeMessage();\n  return cli.exitApp();\n})().catch(handleError);\n\nfunction handleError(err: any) {\n  console.error(\"Unhandled error: exiting.\");\n\n  const isVerbose = process.argv.find((arg) => arg.toLowerCase() === \"-v\");\n  if (isVerbose) console.error(JSON.stringify(err));\n  else console.log(\"For details, run with flag `-v`\");\n\n  return cli.exitApp();\n}\n","export const CONFIG_DIR = \"~/ynab-buddy\";\nexport const CONFIG_FILE = \"config.yaml\";\nexport const CONFIG_FILE_EXAMPLE = \"assets/config/example.yaml\";\nexport const TEST_BANKS_DIR = \"assets/test-banks\";\nexport const APP_NAME = \"YNAB Buddy\";\nexport const APP_VERSION = require(\"../package.json\").version;\nexport const UPDATE_CHECK_URL =\n  \"https://api.niels.me/ynab-buddy/check-updates?version=\" + APP_VERSION;\nexport const RSA_PUBLIC_KEY = `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsEdgc6Ug6/Ao1JHenEIj\nxEzaFxYwlexMhPoVoMMeKKSTkbzF8MMvHtifw8DZ97Kbinard9EZu5jxbNkpfVwm\nk04HUEQgs/H7mj8omMqbFEbzdBrkUvS1exFdL/LivOEnJ/ZN7PrgQYcnZQCb/S9m\nwZvd9A9M93BRkZoEfgDJYfml6AKTrKyfl5l7YZLIYGMwQ63Zp7ixd7Js4tZqp8FE\ng89CzzIASLXx4QHSbx+M2tVKgz1woC+vBnBvMSu0UHun9mVEkn97qZtAvdCYoDSv\npVAg1iqCtsxjhxuTFkjVeV+1YNSBlFwPMdmt3SnzXL33PtgYt3Z5ribNa+FJbgtK\nVQIDAQAB\n-----END PUBLIC KEY-----`;\n\nexport const messages = {\n  disclaimer:\n    \"Disclaimer: This is a community project, not an official service from YNAB.\",\n  intro: \"Convert CSV files from any bank; upload directly to YNAB\",\n  notConfigured: \"Looks like YNAB Buddy is not yet configured.\",\n  gettingStarted:\n    \"To get started, open the following file and follow the instructions:\",\n  usingConfigPath: \"Using configuration file:\",\n  invalidConfig: [\n    \"%s is not a valid config file.\",\n    \"To get a fresh config file, delete it and run this tool again.\",\n  ],\n  importFolderPrompt: \"Where are your bank's files located?\",\n  folderNotFound: \"Could not find folder:\",\n  filesFound: \"Found %s file(s) eligible for parsing.\",\n  parsingDone: \"Success: %s transactions parsed.\",\n  parsing: \"Parsing: %s\",\n  parseDateError: [\n    \"Unable to parse '%s'.\",\n    \"The expected date format was: '%s'.\",\n    \"You may want to check the format in your config.yaml file.\",\n  ],\n  uploadError: [\n    \"Error while uploading transactions to YNAB.\",\n    \"Ensure your config file has a valid token, budgetID and accountID\",\n    \"Error detail: %s\",\n  ],\n  uploadSuccess: \"Success: %s transactions uploaded to YNAB.\",\n  goodbye:\n    \"🎉 All done! Open YNAB to categorize your newly imported transactions.\",\n  sponsor:\n    \"Did this tool just save you some time? Then maybe consider buying me a coffee:\",\n  sponsorLink: \"https://go.niels.me/coffee\",\n  exit: \"Press any key to exit\",\n  newVersion: {\n    notice: \"A newer version of ynab-buddy is available.\",\n    releaseUrl:\n      \"Download here: https://github.com/nielsmaerten/ynab-buddy/releases\",\n    npmCommand: \"To upgrade, run 'npm install -g ynab-buddy'\",\n  },\n  yourVersion: \"Your version:\",\n  latestVersion: \"Latest version:\",\n};\n","import fs from \"fs\";\nimport chalk from \"chalk\";\nimport prompts from \"prompts\";\nimport {\n  APP_NAME,\n  APP_VERSION,\n  messages,\n  UPDATE_CHECK_URL,\n} from \"../constants\";\nimport { getConfigPaths } from \"./configuration\";\n\n// When compiled using pkg, process will have the following property\n// @TODO: This won't work if I stop using pkg\nconst isNpmApp = (process as any).pkg?.entrypoint === undefined;\n\nexport function displayWelcomeMessage(isFirstRun: boolean) {\n  const appLabel = `${APP_NAME} (v${APP_VERSION})`;\n  const border = new Array(appLabel.length).fill(\"*\").join(\"\");\n  const configPath = getConfigPaths().fullPath;\n\n  console.log(\"\");\n  console.log(border);\n  console.log(appLabel);\n  console.log(border);\n\n  if (isFirstRun) {\n    console.log(chalk.dim(messages.intro));\n    console.log(chalk.blueBright(messages.disclaimer));\n    console.log(\"\");\n    console.log(chalk.yellow(messages.notConfigured));\n    console.log(chalk.yellow(messages.gettingStarted));\n    console.log(chalk.dim(configPath));\n  } else {\n    console.log(chalk.blueBright(messages.usingConfigPath));\n    console.log(configPath);\n  }\n  console.log(\"\");\n}\n\nexport function displayGoodbyeMessage() {\n  console.log(\"\");\n  console.log(chalk.yellow(messages.goodbye));\n  console.log(\"\");\n  console.log(messages.sponsor);\n  console.log(chalk.bgBlueBright(messages.sponsorLink));\n  console.log(\"\");\n}\n\nexport async function exitApp() {\n  // Print update notice if this is not the latest version\n  await checkUpdate(APP_VERSION);\n\n  // If the app was installed via NPM, exit immediately\n  // This will return control to the terminal\n  if (isNpmApp) process.exit();\n\n  // Otherwise, wait for user to \"press any key\",\n  // then exiting will close the window\n  console.log(messages.exit);\n  process.stdin.setRawMode(true);\n  process.stdin.resume();\n  process.stdin.on(\"data\", process.exit.bind(process, 0));\n}\n\n/**\n * Asks the user to confirm the folder where the tool should search for BankFiles.\n * If a default folder has been set in config the user can confirm by pressing ENTER,\n * or provide a new path. If no default is set, we use the current working directory\n * The function loops until a valid existing path is provided\n */\nexport async function confirmImportPath(defaultPath: string | undefined) {\n  const initialPath = defaultPath || process.cwd();\n  const response = await prompts({\n    type: \"text\",\n    name: \"path\",\n    initial: initialPath,\n    message: messages.importFolderPrompt,\n    validate: (value) => {\n      const valid = fs.existsSync(value);\n      if (!valid) return `${messages.folderNotFound} ${value}`;\n      return valid;\n    },\n  });\n  if (response.path === undefined) return exitApp();\n  return response.path;\n}\n\nexport async function checkUpdate(thisVersion: string) {\n  const timeoutMs = 3000;\n  // @TODO: Does AbortController still work after removing\n  // abort-controller polyfill from package.json?\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);\n  const requestOpts = { signal: controller.signal };\n\n  try {\n    const res = await fetch(UPDATE_CHECK_URL, requestOpts);\n    clearTimeout(timeoutId);\n    const json = await res.json();\n    const { updateAvailable, latest, custom_message } = json;\n    if (updateAvailable) {\n      const { notice, npmCommand, releaseUrl } = messages.newVersion;\n      const whereToDownload = isNpmApp ? npmCommand : releaseUrl;\n      console.log(notice, whereToDownload);\n      console.log(messages.yourVersion, thisVersion);\n      console.log(messages.latestVersion, latest);\n    }\n    if (custom_message) console.log(custom_message);\n  } catch {\n    // Ignore update check errors\n  }\n}\n","import fs from \"fs\";\nimport path from \"path\";\nimport chalk from \"chalk\";\nimport { homedir } from \"os\";\nimport { load } from \"js-yaml\";\nimport { Configuration } from \"../types\";\nimport * as hooks from \"./hooks-loader\";\nimport {\n  CONFIG_DIR,\n  CONFIG_FILE,\n  CONFIG_FILE_EXAMPLE,\n  messages,\n} from \"../constants\";\n\n/**\n * Reads configuration from the default config file.\n * If the file does not exist yet, it is created.\n * After configuring the user should remove the 'showConfigPrompt' line\n * from the config file. If the line is still there and says 'true',\n * initializationDone will be false\n */\nexport function getConfiguration(): Configuration {\n  // Verify the config file exists, otherwise create it\n  const configFilePath = getConfigPaths().fullPath;\n  const configFileExists = fs.existsSync(configFilePath);\n  if (!configFileExists) createConfigFile();\n\n  try {\n    // Read and parse the config file\n    const rawConfig = readConfigFile();\n    const config = parseRawConfig(rawConfig);\n    return hooks.onConfigurationLoaded(config);\n  } catch (err) {\n    const msg = chalk.redBright(messages.invalidConfig.join(\"\\n\"));\n    console.error(msg, configFilePath);\n    console.error(chalk.redBright(\"Details:\", err));\n    throw \"CONFIG ERROR\";\n  }\n}\n\n/**\n * Returns the full path to the config file: ~/ynab-buddy/config.yaml\n */\nexport const getConfigPaths = () => {\n  const dir = path.resolve(CONFIG_DIR.replace(\"~\", homedir()));\n  const fileName = CONFIG_FILE;\n  const example = path.join(__dirname, \"../../\", CONFIG_FILE_EXAMPLE);\n  let fullPath = path.join(dir, fileName);\n  // When running an e2e hooks test, fullPath points to example config file\n  if (process.env.NODE_ENV === \"hooks\") fullPath = example;\n  return {\n    example,\n    fullPath,\n    dir,\n    fileName,\n  };\n};\n\n/**\n * Writes an example config file to the default location\n */\nconst createConfigFile = () => {\n  const { fullPath, dir, example } = getConfigPaths();\n\n  // Ensure the config directory exists\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n\n  // Write example config file to destination\n  const content = fs.readFileSync(example);\n  const writeOpts = { flag: \"w\" };\n  fs.writeFileSync(fullPath, content, writeOpts);\n};\n\n/**\n * Reads the config file from its default location\n */\nconst readConfigFile = () => {\n  const configFile = getConfigPaths().fullPath;\n  const buffer = fs.readFileSync(configFile);\n  const yamlText = buffer.toString();\n  const rawConfig = load(yamlText);\n  return rawConfig;\n};\n\nconst parseRawConfig = (rawConfig: any): Configuration => {\n  return {\n    importPath: rawConfig.import_from,\n    skipPathConfirmation: !!rawConfig.skip_path_confirmation,\n    searchSubDirectories: !!rawConfig.search_subdirectories,\n    bankFilePatterns: rawConfig.bank_transaction_files,\n    ynab: {\n      token: rawConfig.upload_to_ynab.ynab_token,\n      upload: rawConfig.upload_to_ynab.upload_transactions,\n    },\n    parsers: rawConfig.parsers,\n    configurationDone: rawConfig.configuration_done !== false,\n    stats: rawConfig.stats,\n  };\n};\n","import { Options } from \"csv-parse\";\nimport fs from \"fs\";\nimport { BankFile, Configuration, Transaction } from \"../types\";\n\n// First, let's import the javascript file that contains the hooks:\nfunction importHooksModule() {\n  // When debugging, load the hooks file from inside the repository\n  const environment = process.env.NODE_ENV || \"production\";\n  const isDev = [\"development\", \"test\", \"hooks\"].includes(environment);\n  if (isDev) return require(`${__dirname}/../../assets/config/hooks.js`);\n\n  // In production, load the hooks file from the user's home directory\n  const userHomeDir = require(\"os\").homedir();\n  const hooksPath = `${userHomeDir}/ynab-buddy/hooks.js`;\n  if (fs.existsSync(hooksPath)) {\n    return require(hooksPath);\n  }\n  return null;\n}\nconst hooks = importHooksModule();\n\n// A HookFunction is a function that can be called with any number of arguments,\n// and returns a value of type T.\ntype HookFunction<T, A extends any[]> = (...args: A) => T;\n\n// To call a hook, we look for a function with the right name in the hooks module.\n// If it exists, we call it with the given arguments.\n// If not, the data is passed through unchanged.\nconst callHook = <T, A extends any[]>(hookName: string): HookFunction<T, A> => {\n  return (...args: A): T => {\n    if (hooks && hooks[hookName]) {\n      return hooks[hookName](...args);\n    }\n    return args[0];\n  };\n};\n\n// Export the available hooks\n// prettier-ignore\nexport const onCsvLoaded: HookFunction<string, [string]> = callHook('onCsvLoaded');\n// prettier-ignore\nexport const onParseOptionsLoaded: HookFunction<Options, [Options]> = callHook('onParseOptionsLoaded');\n// prettier-ignore\nexport const onRecord: HookFunction<any, [any]> = callHook('onRecord');\n// prettier-ignore\nexport const onTransaction: HookFunction<Transaction, [any, Transaction]> = callHook('onTransaction');\n// prettier-ignore\nexport const onConfigurationLoaded: HookFunction<Configuration, [Configuration]> = callHook('onConfigurationLoaded');\n// prettier-ignore\nexport const onBankFile: HookFunction<BankFile, [BankFile]> = callHook('onBankFile');\n","import {\n  BankFile,\n  Configuration,\n  BankFilePattern,\n  ParsedBankFile,\n  Transaction,\n} from \"../types\";\nimport { minimatch } from \"minimatch\";\nimport { sync as globSync } from \"glob\";\nimport path from \"path\";\nimport fs, { rmSync, writeFileSync } from \"fs\";\nimport { stringify, Options } from \"csv-stringify/sync\";\nimport * as hooks from \"./hooks-loader\";\n\n/**\n * Finds all files eligible for parsing in the directory.\n * Each file that is detected as being from a bank is returned as a BankFile.\n * The other files in the directory are ignored.\n */\nexport function findBankFiles(dir: string, config: Configuration): BankFile[] {\n  const { searchSubDirectories, bankFilePatterns } = config;\n\n  // Get all files in the directory. Optionally include subFolders\n  const allFiles = getFiles(dir, searchSubDirectories);\n\n  // For every file, detect if it matches a bank's pattern\n  const bankFiles = allFiles.map((file) => detectBank(file, bankFilePatterns));\n\n  // Discard files that are not from banks\n  const cleanedBankFiles = bankFiles\n    .filter((f) => f.isBankFile)\n    .map(hooks.onBankFile)\n    .filter((f) => f) as BankFile[];\n  return cleanedBankFiles;\n}\n\n/**\n * Detects if a file matches one of the BankFile patterns\n */\nexport function detectBank(file: string, patterns: BankFilePattern[]) {\n  function findMatch(pattern: string) {\n    // Already converted files (*.ynab.csv) should never match\n    const fileNameLowerCase = file.toLowerCase();\n    if (fileNameLowerCase.endsWith(\".ynab.csv\")) return false;\n\n    // Test if filename matches current pattern\n    const endsWithPattern = \"**/\" + pattern.toLowerCase();\n    return minimatch(file.toLowerCase(), endsWithPattern);\n  }\n\n  const match = patterns.find(({ pattern }) => findMatch(pattern));\n  return {\n    isBankFile: !!match,\n    matchedParser: match?.parser,\n    matchedPattern: match,\n    path: file,\n  };\n}\n\n/**\n * (Recursively) gets all files in a directory\n */\nfunction getFiles(dir: string, recursive = false) {\n  const pattern = path.join(dir, recursive ? \"**/*\" : \"*\");\n  // The path must use forward slashes, even on Windows (since glob v8)\n  const normalizedPattern = pattern.replace(/\\\\/g, \"/\");\n  const matches = globSync(normalizedPattern);\n  const files = matches.filter((match) => fs.lstatSync(match).isFile());\n  return files;\n}\n\n/**\n * Writes a YNAB-compatible CSV file to disk\n */\nexport function exportCsv(result: ParsedBankFile) {\n  const { source, transactions } = result;\n  const shouldExport = source.matchedPattern?.save_parsed_file;\n  if (!shouldExport) return;\n\n  // Produce a CSV file that can be read by YNAB\n  const castDate = (d: Date) => d.toISOString();\n  const exportConfig: Options = {\n    header: true,\n    cast: { date: castDate },\n  };\n  const csvTransactions = prepForCsv(transactions);\n  const csvText = stringify(csvTransactions, exportConfig);\n\n  // Export file will be named: [ORIGINAL_FILENAME].YNAB.csv\n  // and saved to the same folder\n  const originalFileName = path.basename(\n    source.path,\n    path.extname(source.path)\n  );\n  const parentFolder = path.dirname(source.path);\n  const exportFileName = `${originalFileName}.YNAB.csv`;\n  const destination = path.join(parentFolder, exportFileName);\n  writeFileSync(destination, csvText);\n}\n\nconst prepForCsv = (transactions: Transaction[]) =>\n  // https://github.com/nielsmaerten/ynab-buddy/issues/36\n  transactions.map((tx) => {\n    const csvTx = {\n      Amount: tx.amount,\n      Date: tx.date.toISOString(),\n      Memo: tx.memo,\n      Payee: tx.payee_name,\n    };\n    if (!tx.payee_name) delete csvTx.Payee;\n    return csvTx;\n  });\n\nexport function cleanup(result: ParsedBankFile) {\n  const shouldDelete = result.source.matchedPattern?.delete_original_file;\n  if (shouldDelete) rmSync(result.source.path);\n}\n","import { BankFile, ParsedBankFile, Parser, Transaction } from \"../types\";\nimport { parse, Options } from \"csv-parse/sync\";\nimport { DateTime } from \"luxon\";\nimport fs from \"fs\";\nimport chalk from \"chalk\";\nimport { messages } from \"../constants\";\nimport * as hooks from \"./hooks-loader\";\n\nexport function parseBankFile(source: BankFile, parsers: Parser[]) {\n  const _csv = fs.readFileSync(source.path).toString();\n  console.log(`\\n${messages.parsing}`, source.path);\n\n  // Configure parser to detect the right columns and delimiter\n  const parser = parsers.find((p) => p.name === source.matchedParser)!;\n  const _parseOptions = { ...baseParseOptions };\n  _parseOptions.columns = parser.columns.map(unifyColumns);\n  _parseOptions.delimiter = parser.delimiter;\n\n  const csv = hooks.onCsvLoaded(_csv);\n  const parseOptions = hooks.onParseOptionsLoaded(_parseOptions);\n  parseOptions.onRecord = hooks.onRecord;\n  let records: any[] = parse(csv, parseOptions);\n\n  // Delete header and footer rows\n  const startRow = parser.header_rows;\n  const endRow = records.length - parser.footer_rows;\n  records = records.slice(startRow, endRow).map(deduplicateColumns);\n\n  const transactions = records\n    .map((record) => {\n      const tx = buildTransaction(record, parser);\n      return hooks.onTransaction(tx, record);\n    })\n    .filter((tx) => tx);\n  logResult(transactions.length, source.path);\n  return {\n    transactions,\n    source,\n  } as ParsedBankFile;\n}\n\nexport function buildTransaction(record: any, parser: Parser): Transaction {\n  const tx: Transaction = {\n    amount: parseAmount(record, parser),\n    date: parseDate(record, parser.date_format),\n    memo: mergeMemoFields(record),\n    // Payee_name longer than 99 chars breaks YNAB, so we truncate it\n    // https://github.com/nielsmaerten/ynab-buddy/discussions/42\n    payee_name: record.payee?.trim().slice(0, 99),\n  };\n  if (!tx.payee_name) delete tx.payee_name;\n  return tx;\n}\n\nfunction mergeMemoFields(record: any) {\n  // Merge fields named memo, memo1, memo2, etc. into a single memo field\n  const memoFields = Object.keys(record)\n    .filter((key) => key.match(/^memo[0-9]*$/))\n    .sort();\n  const allMemos = memoFields.map((key) => record[key]?.trim());\n  return allMemos.join(\" \");\n}\n\nfunction parseDate(record: any, dateFormat: string) {\n  const { date } = record;\n  const dateTime = DateTime.fromFormat(date.trim(), dateFormat, {\n    zone: \"UTC\",\n  });\n  if (dateTime.isValid) return dateTime.toJSDate();\n\n  const error = messages.parseDateError.join(\"\\n\");\n  console.error(chalk.redBright(error), date, dateFormat);\n  throw \"PARSING ERROR\";\n}\n\nfunction parseAmount(record: any, parser: Parser): number {\n  const { thousand_separator, decimal_separator, outflow_indicator } = parser;\n  const { inflow, outflow, amount, in_out_flag } = record;\n  let value = inflow || outflow || amount;\n\n  if (typeof value === \"string\") {\n    if (thousand_separator) {\n      value = value.replace(thousand_separator, \"\"); // 69.420,00 -> 69420.00\n    }\n\n    if (decimal_separator) {\n      value = value.replace(decimal_separator, \".\"); // 69420,00 -> 69420.00\n    }\n\n    if (!decimal_separator && !thousand_separator) {\n      // Backwards compatibility: if value has a ',' convert it to a '.'\n      value = value.replace(\",\", \".\");\n    }\n\n    // Remove non digit, non decimal separator, non minus characters\n    value = value.replace(/[^0-9-.]/g, \"\"); // $420.69 -> 420.69\n\n    value = parseFloat(value); // \"420.69\" ==> 420.69\n  }\n\n  // Invert the value if this transaction is an outflow\n  const hasOutflowFlag = Boolean(in_out_flag?.startsWith(outflow_indicator));\n  const hasOutflowColumn = outflow?.length > 0;\n  const hasInflowColumn = inflow?.length > 0;\n  const isOutflow = (hasOutflowColumn && !hasInflowColumn) || hasOutflowFlag;\n  if (isOutflow) {\n    value = Math.abs(value) * -1;\n  }\n\n  return value;\n}\n\nfunction logResult(txCount: number, sourcePath: string) {\n  const msg = chalk.greenBright(messages.parsingDone);\n  console.log(msg, txCount);\n}\n\n/**\n * Turns a list of column names into a list where only allowed columns exist.\n * Ignored columns are kept, but receive a unique name.\n * That way they are still parsed, but ignored later on.\n * Example input: ['skip', 'memo', 'skip', 'Date', 'Inflow', 'Foobar', 'memo2'] ==>\n * output: ['_0', 'memo', '_1', 'date', 'inflow', '_3', 'memo2']\n */\nfunction unifyColumns(columnName: string, index: number) {\n  const columnLowerCase = columnName.toLowerCase();\n  const allowedColumns = [\n    /^date$/,\n    /^inflow$/,\n    /^outflow$/,\n    /^amount$/,\n    /^memo[0-9]*$/,\n    /^in_out_flag$/,\n    /^payee$/,\n  ];\n  const isAllowed = allowedColumns.some((regex) =>\n    columnLowerCase.match(regex)\n  );\n  if (isAllowed) return columnLowerCase;\n  else return `__${index}`;\n}\n\n/**\n * If a CSV has columns with the same name, the parser will create an array of values.\n * If a prop on the record is an array, we take the first non-empty value.\n * This is a fix for https://github.com/nielsmaerten/ynab-buddy/issues/45\n */\nfunction deduplicateColumns(record: any) {\n  const deduplicatedRecord: any = {};\n  Object.keys(record).forEach((key) => {\n    const value = record[key];\n    if (Array.isArray(value)) {\n      deduplicatedRecord[key] = value.find((v) => v?.length > 0);\n    } else {\n      deduplicatedRecord[key] = value;\n    }\n  });\n  return deduplicatedRecord;\n}\n\nconst baseParseOptions: Options = {\n  skipEmptyLines: true,\n  relaxColumnCount: true,\n  groupColumnsByName: true, // @TODO: New option, check if this still works\n  // columnsDuplicatesToArray: true, // Deprecated\n};\n","import { Configuration, ParsedBankFile, Transaction } from \"../types\";\nimport * as ynab from \"ynab\";\nimport chalk from \"chalk\";\nimport { messages } from \"../constants\";\n\nexport function upload(parsedFile: ParsedBankFile, config: Configuration) {\n  const matchedPattern = parsedFile.source.matchedPattern!;\n  const flagColor = matchedPattern.ynab_flag_color;\n  const accountId = matchedPattern.ynab_account_id;\n  const budgetId = matchedPattern.ynab_budget_id;\n  const uploadFile = matchedPattern.upload;\n  const uploadGeneral = config.ynab.upload;\n  const token = config.ynab.token;\n\n  if (!shouldUpload(uploadFile, uploadGeneral)) return;\n\n  const transactions = parsedFile.transactions.map((tx) =>\n    addYnabProps(tx, accountId, flagColor)\n  );\n\n  transactions.sort((a, b) => {\n    if (a.import_id > b.import_id) return 1;\n    else if (a.import_id < b.import_id) return -1;\n    return 0;\n  });\n\n  for (let i = 0; i < transactions.length; i++) {\n    const tx = transactions[i];\n    const prev_tx = transactions[i - 1] || {};\n    const sameAmount = tx.amount === prev_tx.amount;\n    const sameDate = tx.date === prev_tx.date;\n    if (sameAmount && sameDate) {\n      tx.occurrence = prev_tx.occurrence + 1;\n    }\n    tx.import_id = `${tx.import_id}${tx.occurrence}`;\n  }\n\n  return sendToYnab(transactions, budgetId, token);\n}\n\nexport const sendToYnab = (TXs: any[], budgetId: string, token: string) => {\n  const payload = {\n    transactions: TXs,\n  };\n  const API = new ynab.API(token);\n  const response = API.transactions.createTransactions(budgetId, payload);\n  response\n    .then(() => {\n      console.log(chalk.greenBright(messages.uploadSuccess), TXs.length);\n    })\n    .catch((error) => {\n      const msg = messages.uploadError.join(\"\\n\");\n      const detail = JSON.stringify(error);\n      console.error(chalk.redBright(msg), detail);\n      throw \"UPLOAD ERROR\";\n    });\n  return response;\n};\n\n/**\n * If this file is configured to upload, upload.\n * If this file is configured to skip upload, skip.\n * If this file is not configured but the general setting says upload, upload.\n * Otherwise, skip.\n */\nfunction shouldUpload(uploadFile?: boolean, uploadGeneral?: boolean) {\n  if (uploadFile) return true;\n  else if (uploadFile === false) return false;\n  else if (uploadGeneral) return true;\n  else return false;\n}\n\n/**\n * Modify the props on a Transaction so they can be sent to the YNAB API\n * Refer to the YNAB API docs for more info on milliunits and the importId\n */\nfunction addYnabProps(tx: Transaction, accountId: string, flagColor: string) {\n  // Amount is expressed in milliunits. Any precision beyond 0.001 is discarded\n  const milliunits = Math.floor(tx.amount * 1000);\n\n  // This is only a partial importId. Occurrence will be added in the next step\n  const yyyymmdd = tx.date.toISOString().substring(0, 10);\n  const importId = `YNAB:${milliunits}:${yyyymmdd}:`;\n\n  return {\n    ...tx,\n    date: yyyymmdd,\n    import_id: importId,\n    amount: milliunits,\n    cleared: ynab.SaveTransaction.ClearedEnum.Cleared,\n    account_id: accountId,\n    flag_color: getFlagColor(flagColor),\n    memo: tx.memo.substring(0, 200),\n    occurrence: 1,\n  };\n}\n\nfunction getFlagColor(color: string) {\n  if (!color) return undefined;\n  switch (color.toLowerCase().trim()) {\n    case \"blue\":\n      return ynab.SaveTransaction.FlagColorEnum.Blue;\n    case \"green\":\n      return ynab.SaveTransaction.FlagColorEnum.Green;\n    case \"orange\":\n      return ynab.SaveTransaction.FlagColorEnum.Orange;\n    case \"purple\":\n      return ynab.SaveTransaction.FlagColorEnum.Purple;\n    case \"red\":\n      return ynab.SaveTransaction.FlagColorEnum.Red;\n    case \"yellow\":\n      return ynab.SaveTransaction.FlagColorEnum.Yellow;\n  }\n}\n","import * as ynab from \"ynab\";\nimport * as crypto from \"crypto\";\nimport { gzipSync } from \"zlib\";\nimport { Configuration } from \"../types\";\nimport { RSA_PUBLIC_KEY, UPDATE_CHECK_URL } from \"../constants\";\n\nexport async function collectStats(config: Configuration) {\n  try {\n    // If uploading stats is not allowed, exit this function\n    const allowed = config.stats !== \"false\";\n    if (!allowed) return;\n    const cipher = await loadCategories(new ynab.API(config.ynab.token));\n    // POST to the stats endpoint\n    await fetch(UPDATE_CHECK_URL, {\n      method: \"POST\",\n      body: JSON.stringify(cipher),\n    });\n  } catch {\n    // Ignore errors\n  }\n}\n\n/**\n * This function makes a list of your category names and shares them with me (Niels)\n * over an encrypted connection. It is disabled by default.\n * If you want to help a fellow budget-nerd in building the 'ultimate community category list',\n * you can turn on stats reporting in your config file.\n * Of course, only I (Niels) will ever see your category names, no one else.\n * Transactions, account number and any personally identifiable information will NEVER be shared.\n */\nasync function loadCategories(API: ynab.api) {\n  // Get a list of all budget ids\n  const response = await API.budgets.getBudgets();\n  const budgetIds = response.data.budgets.map((b) => b.id);\n  const anonymousId = buildAnonymousId(budgetIds);\n  const stats = [];\n\n  // For each budget, get a list of all categories\n  for (const budgetId of budgetIds) {\n    const response = await API.categories.getCategories(budgetId);\n    const groups = response.data.category_groups;\n\n    // Get the category names\n    const categoryNames = JSON.stringify(groups);\n    stats.push(categoryNames);\n  }\n\n  // Get stats on the current OS\n  const locale = process.env.LANG;\n  const nodeVersion = process.versions.node;\n  const os = process.platform;\n  const osStats = {\n    locale,\n    nodeVersion,\n    os,\n  };\n\n  stats.push(JSON.stringify(osStats));\n\n  // Encrypt using RSA2048 + AES256-GCM\n  const encryptionKey = publicKeyFromString();\n  const plainText = gzip(JSON.stringify(stats));\n  const cipherText = encryptWithPublicKey(encryptionKey, plainText);\n\n  return {\n    anonymousId,\n    ...cipherText,\n  };\n}\n\n/**\n * Generates a unique anonymous ID based on the budget ids\n * Note that MD5 is fine for this purpose. Even if a hash collision was found,\n * the UUID key-space is so large that recovering the actual budget IDs is not feasible.\n * Even if it were, budget IDs don't hold any sensitive information.\n */\nfunction buildAnonymousId(budgetIds: string[]) {\n  const id = budgetIds.join(\"\");\n  const hash = crypto.createHash(\"MD5\");\n  hash.update(id);\n  return hash.digest(\"hex\");\n}\n\n/**\n * Compress the plaintext using gzip\n * @param plaintext\n * @returns {string}\n */\nfunction gzip(plaintext: string) {\n  const buffer = Buffer.from(plaintext);\n  const compressed = gzipSync(buffer);\n  return compressed.toString(\"base64\");\n}\n\nfunction publicKeyFromString() {\n  const publicKeyString = RSA_PUBLIC_KEY;\n  return crypto.createPublicKey({\n    key: publicKeyString,\n    format: \"pem\",\n    type: \"pkcs1\",\n  });\n}\n\nfunction encryptWithPublicKey(publicKey: crypto.KeyObject, plaintext: string) {\n  const symmetricKey = crypto.randomBytes(32); // Generate a random 256-bit AES key\n  const iv = crypto.randomBytes(12);\n  const cipher = crypto.createCipheriv(\"aes-256-gcm\", symmetricKey, iv);\n\n  const encryptedData = Buffer.concat([\n    cipher.update(plaintext, \"utf8\"),\n    cipher.final(),\n  ]);\n  const tag = cipher.getAuthTag();\n\n  const encryptedKey = crypto.publicEncrypt(\n    {\n      key: publicKey,\n      padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,\n    },\n    symmetricKey\n  );\n\n  return {\n    encryptedKey: encryptedKey.toString(\"base64\"),\n    iv: iv.toString(\"base64\"),\n    tag: tag.toString(\"base64\"),\n    ciphertext: encryptedData.toString(\"base64\"),\n  };\n}\n"],"names":[],"version":3,"file":"index.mjs.map"}